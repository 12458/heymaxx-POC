openapi: 3.0.0
info:
  title: E-commerce CRUD app Backend API
  description: API for managing an e-commerce platform with CRUD operations.
  version: 1.0.0
servers:
  - url: http://localhost:5000
paths:
  /:
    get:
      summary: Welcome
      description: Returns a welcome message.
      responses:
        "200":
          description: A welcome message.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Welcome to the E-commerce API
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                confirm_password:
                  type: string
      responses:
        "200":
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
        "400":
          description: Missing required fields or passwords do not match or username already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /login:
    post:
      summary: Log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "400":
          description: Missing username or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /logout:
    post:
      summary: Log out a user
      security:
        - JWTAuth: []
      responses:
        "200":
          description: Logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /view_orders:
    get:
      summary: View Orders
      description: Retrieves orders for the authenticated user.
      security:
        - JWTAuth: []
      responses:
        "200":
          description: A list of orders.
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: "#/components/schemas/Order"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"
  /order/{order_id}:
    get:
      summary: Get Order
      description: Retrieves details of a specific order for the authenticated user.
      parameters:
        - name: order_id
          in: path
          description: ID of the order to retrieve
          required: true
          schema:
            type: string
      security:
        - JWTAuth: []
      responses:
        "200":
          description: Details of the order.
          content:
            application/json:
              schema:
                type: object
                properties:
                  order_items:
                    type: array
                    items:
                      $ref: "#/components/schemas/OrderItem"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"
  /review:
    get:
      summary: Review Items
      description: Retrieves items for which the authenticated user can submit reviews.
      security:
        - JWTAuth: []
      responses:
        "200":
          description: A list of items.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Item"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"
  /review/{item_id}:
    post:
      summary: Submit Review
      description: Allows the authenticated user to submit a review for a specific item.
      parameters:
        - name: item_id
          in: path
          description: ID of the item to review
          required: true
          schema:
            type: integer
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: integer
                  format: int32
                  minimum: 1
                  maximum: 5
                review:
                  type: string
      responses:
        "201":
          description: Review submitted successfully.
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"
  /products:
    get:
      summary: Get Products
      description: Retrieves all products.
      responses:
        "200":
          description: A list of products.
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: "#/components/schemas/Item"
        "500":
          $ref: "#/components/responses/InternalError"
  /product/{item_id}:
    get:
      summary: Get Product Details
      description: Retrieves details of a specific product.
      parameters:
        - name: item_id
          in: path
          description: ID of the product to retrieve
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Details of the product.
          content:
            application/json:
              schema:
                type: object
                properties:
                  product:
                    $ref: "#/components/schemas/Item"
                  reviews:
                    type: array
                    items:
                      $ref: "#/components/schemas/Review"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
  /add_to_cart/{item_id}:
    put:
      summary: Add to Cart
      description: Adds an item to the authenticated user's shopping cart.
      parameters:
        - name: item_id
          in: path
          description: ID of the item to add to cart
          required: true
          schema:
            type: integer
      security:
        - JWTAuth: []
      responses:
        "200":
          description: Item added to cart successfully.
        "500":
          $ref: "#/components/responses/InternalError"
  /view_cart:
    get:
      summary: View Cart
      description: Retrieves items in the authenticated user's shopping cart.
      security:
        - JWTAuth: []
      responses:
        "200":
          description: Items in the cart.
          content:
            application/json:
              schema:
                type: object
                properties:
                  cart:
                    type: array
                    items:
                      $ref: "#/components/schemas/CartItem"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"
  /remove_from_cart/{item_id}:
    delete:
      summary: Remove from Cart
      description: Removes an item from the authenticated user's shopping cart.
      parameters:
        - name: item_id
          in: path
          description: ID of the item to remove from cart
          required: true
          schema:
            type: integer
      security:
        - JWTAuth: []
      responses:
        "200":
          description: Item removed from cart successfully.
        "500":
          $ref: "#/components/responses/InternalError"
  /checkout:
    post:
      summary: Checkout
      description: Processes the checkout for the authenticated user's cart.
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                address:
                  type: string
                phone:
                  type: string
      responses:
        "200":
          description: URL for checkout.
          content:
            application/json:
              schema:
                type: object
                properties:
                  checkout_url:
                    type: string
        "400":
          $ref: "#/components/responses/BadRequest"
  /admin:
    get:
      summary: Get all products
      security:
        - JWTAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "500":
          description: Failed to retrieve products
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /admin/add:
    post:
      summary: Add a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"

      security:
        - JWTAuth: []
      responses:
        "201":
          description: Product added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Missing required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "500":
          description: Failed to add product
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /admin/remove/{item_id}:
    delete:
      summary: Remove a product
      parameters:
        - in: path
          name: item_id
          schema:
            type: integer
          required: true
          description: Numeric ID of the product to remove
      security:
        - JWTAuth: []
      responses:
        "200":
          description: Product removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "500":
          description: Failed to remove product
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /admin/modify/{item_id}:
    post:
      summary: Update a specific product
      parameters:
        - in: path
          name: item_id
          schema:
            type: integer
          required: true
          description: Numeric ID of the product to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      security:
        - JWTAuth: []
      responses:
        "200":
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Missing required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
components:
  schemas:
    User:
      type: object
      properties:
        user_id:
          type: integer
          description: The unique identifier for the user.
        username:
          type: string
          description: The username of the user.
        email:
          type: string
          format: email
          description: The email address of the user.
        password:
          type: string
          description: The password of the user.

    Item:
      type: object
      properties:
        item_id:
          type: integer
          description: The unique identifier for the item.
        name:
          type: string
          description: The name of the item.
        description:
          type: string
          description: The description of the item.
        price:
          type: number
          description: The price of the item.

    CartItem:
      type: object
      properties:
        item_id:
          type: integer
          description: The item ID associated with the cart item.
        item_name:
          type: string
          description: The name of the item in the cart.
        item_price:
          type: number
          description: The price of the item in the cart.
        qty:
          type: integer
          description: The quantity of the item in the cart.

    Order:
      type: object
      properties:
        order_id:
          type: string
          description: The unique identifier for the order.
        user_id:
          type: string
          description: The user ID associated with the order.
        shipping_address:
          type: string
          description: The shipping address for the order.
        payment_status:
          type: integer
          description: The payment status of the order.
        order_date:
          type: string
          format: date-time
          description: The date and time when the order was placed.
        phone:
          type: string
          description: The phone number associated with the order.

    OrderItem:
      type: object
      properties:
        item_name:
          type: string
          description: The name of the item associated with the order item.
        item_price:
          type: number
          description: The price of the item associated with the order item.
        qty:
          type: integer
          description: The quantity of the item in the order.

    Review:
      type: object
      properties:
        item_id:
          type: integer
          description: The item ID associated with the review.
        user_id:
          type: integer
          description: The user ID associated with the review.
        rating:
          type: integer
          description: The rating given in the review.
        review:
          type: string
          description: The content of the review.

    Product:
      type: object
      properties:
        name:
          type: string
        price:
          type: number
        description:
          type: string
  responses:
    Unauthorized:
      description: Unauthorized access error.
    InternalError:
      description: Internal server error.
    BadRequest:
      description: Bad request error.
    NotFound:
      description: Not Found error.
  securitySchemes:
    JWTAuth:
      type: apiKey
      in: header
      name: Authorization
      description: JWT token for authentication.
